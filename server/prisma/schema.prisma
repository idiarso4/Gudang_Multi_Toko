// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String   @map("full_name")
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  products              Product[]
  orders                Order[]
  marketplaceAccounts   UserMarketplaceAccount[]
  stockMovements        StockMovement[]

  @@map("users")
}

model Marketplace {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  apiEndpoint String   @map("api_endpoint")
  config      Json?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  userAccounts      UserMarketplaceAccount[]
  marketplaceProducts MarketplaceProduct[]

  @@map("marketplaces")
}

model UserMarketplaceAccount {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  marketplaceId String   @map("marketplace_id")
  storeName    String    @map("store_name")
  apiKey       String?   @map("api_key")
  apiSecret    String?   @map("api_secret")
  credentials  Json?
  isConnected  Boolean   @default(false) @map("is_connected")
  lastSync     DateTime? @map("last_sync")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplace Marketplace  @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  orders      Order[]
  marketplaceProducts MarketplaceProduct[]
  syncLogs    SyncLog[]

  @@unique([userId, marketplaceId])
  @@map("user_marketplace_accounts")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  parentId    String?   @map("parent_id")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  categoryId  String?  @map("category_id")
  sku         String   @unique
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  weight      Decimal? @db.Decimal(8, 3)
  dimensions  Json?
  images      Json?
  attributes  Json?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category?            @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  inventory       Inventory[]
  marketplaceProducts MarketplaceProduct[]
  orderItems      OrderItem[]
  stockMovements  StockMovement[]

  @@map("products")
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String   @map("product_id")
  variantName String   @map("variant_name")
  sku         String   @unique
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  attributes  Json?
  isActive    Boolean  @default(true) @map("is_active")

  // Relations
  product         Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory       Inventory[]
  marketplaceProducts MarketplaceProduct[]
  orderItems      OrderItem[]
  stockMovements  StockMovement[]

  @@map("product_variants")
}

model Inventory {
  id                String   @id @default(cuid())
  productId         String   @map("product_id")
  variantId         String?  @map("variant_id")
  stockQuantity     Int      @map("stock_quantity")
  reservedQuantity  Int      @default(0) @map("reserved_quantity")
  availableQuantity Int      @map("available_quantity")
  minStockLevel     Int      @default(0) @map("min_stock_level")
  location          String?
  lastUpdated       DateTime @updatedAt @map("last_updated")

  // Relations
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([productId, variantId])
  @@map("inventory")
}

model MarketplaceProduct {
  id                    String      @id @default(cuid())
  productId             String      @map("product_id")
  variantId             String?     @map("variant_id")
  marketplaceAccountId  String      @map("marketplace_account_id")
  marketplaceProductId  String      @map("marketplace_product_id")
  marketplaceSku        String?     @map("marketplace_sku")
  marketplacePrice      Decimal?    @db.Decimal(10, 2) @map("marketplace_price")
  marketplaceData       Json?       @map("marketplace_data")
  syncStatus            SyncStatus  @default(PENDING) @map("sync_status")
  lastSynced            DateTime?   @map("last_synced")
  createdAt             DateTime    @default(now()) @map("created_at")

  // Relations
  product           Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant           ProductVariant?        @relation(fields: [variantId], references: [id], onDelete: Cascade)
  marketplaceAccount UserMarketplaceAccount @relation(fields: [marketplaceAccountId], references: [id], onDelete: Cascade)

  @@unique([marketplaceAccountId, marketplaceProductId])
  @@map("marketplace_products")
}

model Order {
  id                    String      @id @default(cuid())
  userId                String      @map("user_id")
  marketplaceAccountId  String      @map("marketplace_account_id")
  orderNumber           String      @unique @map("order_number")
  marketplaceOrderId    String      @map("marketplace_order_id")
  status                OrderStatus
  totalAmount           Decimal     @db.Decimal(10, 2) @map("total_amount")
  shippingCost          Decimal?    @db.Decimal(10, 2) @map("shipping_cost")
  taxAmount             Decimal?    @db.Decimal(10, 2) @map("tax_amount")
  customerInfo          Json        @map("customer_info")
  shippingAddress       Json        @map("shipping_address")
  orderDate             DateTime    @map("order_date")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")

  // Relations
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplaceAccount UserMarketplaceAccount @relation(fields: [marketplaceAccountId], references: [id], onDelete: Cascade)
  orderItems         OrderItem[]
  stockMovements     StockMovement[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String  @map("order_id")
  productId    String  @map("product_id")
  variantId    String? @map("variant_id")
  sku          String
  productName  String  @map("product_name")
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2) @map("unit_price")
  totalPrice   Decimal @db.Decimal(10, 2) @map("total_price")
  productData  Json?   @map("product_data")

  // Relations
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model StockMovement {
  id          String           @id @default(cuid())
  productId   String           @map("product_id")
  variantId   String?          @map("variant_id")
  orderId     String?          @map("order_id")
  userId      String           @map("user_id")
  movementType MovementType    @map("movement_type")
  quantity    Int
  stockBefore Int              @map("stock_before")
  stockAfter  Int              @map("stock_after")
  reason      String
  createdAt   DateTime         @default(now()) @map("created_at")

  // Relations
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  order   Order?          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

model SyncLog {
  id                   String      @id @default(cuid())
  marketplaceAccountId String      @map("marketplace_account_id")
  syncType             SyncType    @map("sync_type")
  status               SyncStatus
  syncData             Json?       @map("sync_data")
  errorMessage         String?     @map("error_message")
  startedAt            DateTime    @map("started_at")
  completedAt          DateTime?   @map("completed_at")

  // Relations
  marketplaceAccount UserMarketplaceAccount @relation(fields: [marketplaceAccountId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  PARTIAL
}

enum SyncType {
  PRODUCTS
  ORDERS
  INVENTORY
  FULL_SYNC
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  RESERVED
  UNRESERVED
}
